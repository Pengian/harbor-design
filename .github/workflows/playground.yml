name: playground
on:
  push:
    branches:
      - main

jobs:
  build_client_dist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
        with:
          version: 8
      - run: pnpm install

      - name: build arco playground
        run: pnpm build:arco-vue

      - name: Upload build dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client_dist
          path: ./packages/playground/dist

  build_server_dist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
        with:
          version: 8
      - run: pnpm install

      - name: build server
        run: pnpm build:server

      - name: Upload build dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: server_dist
          path: ./packages/server/dist

  magic_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - id: generate
        run: echo "VERSION=yiwwhl/harbor-design:$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    outputs:
      VERSION: ${{ steps.generate.outputs.VERSION }}

  magic_server_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - id: generate
        run: echo "VERSION=yiwwhl/harbor-design-server:$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    outputs:
      VERSION: ${{ steps.generate.outputs.VERSION }}

  build_client_image:
    needs: [build_client_dist, magic_version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: client_dist
          path: ./

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ needs.magic_version.outputs.VERSION }}

  build_server_image:
    needs: [build_server_dist, magic_server_version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: server_dist
          path: ./

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./packages/server
          push: true
          tags: ${{ needs.magic_server_version.outputs.VERSION }}
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}

  webhooks:
    runs-on: ubuntu-latest
    needs:
      [
        magic_version,
        build_client_image,
        magic_server_version,
        build_server_image,
      ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: trigger webhook
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{ "version": "${{ needs.magic_version.outputs.VERSION }}", "server_version": "${{ needs.magic_server_version.outputs.VERSION }}" }' ${{ secrets.WEB_HOOK_TARGET }}
